"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                              Felipe's Bosi vimrc                             " 
"                                                                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Vim Plug config
call plug#begin('~/.vim/plugged')

Plug 'https://github.com/mileszs/ack.vim.git'
Plug 'https://github.com/jiangmiao/auto-pairs.git'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'https://github.com/j5shi/CommandlineComplete.vim.git'
Plug 'itchyny/lightline.vim'
Plug 'https://github.com/majutsushi/tagbar.git'
Plug 'https://github.com/tpope/vim-commentary.git'
Plug 'https://github.com/easymotion/vim-easymotion.git'
Plug 'https://github.com/tpope/vim-surround.git'
Plug 'https://github.com/frazrepo/vim-rainbow.git'
Plug 'sheerun/vim-polyglot'
Plug 'eugen0329/vim-esearch'
Plug 'https://github.com/terryma/vim-expand-region.git'

" Traces.vim do not work with
Plug 'https://github.com/markonm/traces.vim.git'
call plug#end()

set mouse=a

" Stoping vim from creating swp files
set nobackup
set nowritebackup
set noswapfile

" Display completion matches on your status line
set wildmenu

" Setting vplit to right
:set splitright

" Adding fzf
set rtp+=/usr/local/opt/fzf

" Adding the command :Prettier to reformat file
command! -nargs=0 Prettier :CocCommand prettier.formatFile

" Save 20 items in history
set history=20

" Display the incomplete commands in the bottom right-hand side of your screen.  
set showcmd

" Highlight search matches
set hlsearch

" Enable incremental searching
set incsearch

" Override the 'ignorecase' option if the search pattern contains upper case characters.
set smartcase

" Turn on line numbering
set number

" Don't line wrap mid-word.
set lbr

" Copy the indentation from the current line.
set autoindent

" Use spaces instead of tabs
set expandtab

" Enable smart tabs
set smarttab

" Make a tab equal to 4 spaces
set shiftwidth=2
set tabstop=2

" Tell vim what background you are using
set bg=dark

" Seting a color theme
let g:gruvbox_italic=1
let g:gruvbox_contrast_dark='soft'
colorscheme gruvbox

syntax on

"Configuration to make the lightline plugin work
set laststatus=2

"Removing the show note bellow since I'm using lightline
set noshowmode

"""""""""" Plugins configurations

" Easymotion
map <Leader> <Plug>(easymotion-prefix)
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" Sneak vim
let g:sneak#label = 1

" Coc.vim

function! Tab_Or_Complete() abort
  " If completor is already open the `tab` cycles through suggested completions.
  if pumvisible()
    return "\<C-N>"
  " If completor is not open and we are in the middle of typing a word then
  " `tab` opens completor menu.
  elseif col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^[[:keyword:][:ident:]]'
    return "\<C-R>=completor#do('complete')\<CR>"
  else
    " If we aren't typing a word and we press `tab` simply do the normal `tab`
    " action.
    return "\<Tab>"
  endif
endfunction

" Use `tab` key to select completions.  Default is arrow keys.
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Use tab to trigger auto completion.  Default suggests completions as you type.
let g:completor_auto_trigger = 0
inoremap <expr> <Tab> Tab_Or_Complete()

" TextEdit might fail if hidden is not set.
set hidden

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

"""""""""" Personal functions

" Creating a function to initWork
function! InitWork()
  :e ~/texts/todoList.md
  :vsplit<CR>==
  :e ~/texts/workTodoList.md
endfunction

" Setting function InitWork to :Init
command! -nargs=0 Init :call InitWork()

" Creating a funtion to auto-start a journal entry
function! InitJournalEntry()
  let day = strftime("%Y-%m-%d")
  let filePath = "~/texts/journal/" . day . ".md"
  execute "e " . filePath
  let firstLine = "# " . day
  execute "normal i" . firstLine
endfunction

" Setting function InitJournalEntry to :Journal
command! -nargs=0 Journal :call InitJournalEntry()

"""""""""""""""" Snippets
"""""""" React function component
function ReactFunctionComponent(name)
  :-1read ~/dotfiles/templates/.react-function.js
  execute "normal 2jea " . a:name
  execute "normal /default\<CR>"
  execute "normal A " . a:name . ";"
  execute "normal 4kA"
endfunction

command! -nargs=1 ReactF :call ReactFunctionComponent(<f-args>)

""""""""""""Remaps
" Remaping leader to Prettier and/ Format - Steam
nnoremap <leader>f :Format<CR>
nnoremap <leader>p :Prettier<CR>

" Fast split navigation with <Ctrl> + hjkl.
noremap <c-h> <c-w>h
noremap <c-j> <c-w>j
noremap <c-k> <c-w>k
noremap <c-l> <c-w>l

" Remap to vertical split and horizontal split
nnoremap <leader>v :vsplit<CR>==
nnoremap <leader>h :split<CR>==

" Remap to create new tab
nnoremap <leader>t :tabnew<CR>==

" Remap to add a ctrl-c and ctrl-v
nnoremap <c-c> "+yy
inoremap <c-c> <Esc>"+yy
vnoremap <c-c> "+y
nnoremap <c-v> "+p
inoremap <c-v> <Esc>"+p
vnoremap <c-v> "+p

" Adding a shortcut to Tagbar
nnoremap <leader>s :TagbarToggle<CR>

" Adding a shortcut to FZF
nnoremap <c-a> :FZF<CR>
inoremap <c-a> <Esc>:FZF<CR>
vnoremap <c-a> <Esc>:FZF<CR>

" Change default behavior for the j and k keys
noremap <silent> k gk
noremap <silent> j gj
noremap <silent> 0 g0
noremap <silent> $ g$

" Removing change to lowercase from vim

vnoremap u <nop>
xnoremap U <nop>
nnoremap gu <nop>
nnoremap gU <nop>

" Remap netwr

nnoremap <leader>e :Explore<CR>
inoremap <leader>e <ESC>:Explore<CR>
vnoremap <leader>e <ESC>:Explore<CR>

" Easy compile java in vim with <leader>m
autocmd FileType java set makeprg=javac\ %
set errorformat=%A%f:%l:\ %m,%-Z%p^,%-C.%#
nnoremap <leader>m :make<CR>
nnoremap <leader>n :!mvn package<CR>

